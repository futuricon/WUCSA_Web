@inject SignInManager<AppUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}

<ul>
    <li class="heading">Manage your account</li>
    <li><a class="@ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index"><i class="lni lni-user"></i> Profile</a></li>
    <li><a class="@ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email"><i class="lni lni-envelope"></i> Email</a></li>
    <li><a class="@ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword"><i class="lni lni-lock-alt"></i> Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins"><a id="external-login" class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins"><i class="lni lni-enter"></i> External logins</a></li>
    }
    @if (User.IsInRole("SuperAdmin") || User.IsInRole("Admin"))
    {
        <li><a class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication"><i class="lni lni-shield"></i> Two-factor authentication</a></li>
    }
    <li><a class="@ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData"><i class="lni lni-target-customer"></i> Personal data</a></li>
</ul>
